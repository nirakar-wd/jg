<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JG</title>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
        href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap"
        rel="stylesheet">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css"
        integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />



    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tiny-slider/2.9.4/tiny-slider.min.css"
        integrity="sha512-06CZo7raVnbbD3BlY8/hGUoUCuhk8sTdVGV3m3nuh9i2R+UmkLbLRTE/My8TuJ3ALbDulhBObJQWtOUt0mXzNQ=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />

    <link rel="stylesheet" href="/css/bootstrap.min.css">


    <link rel="stylesheet" href="/css/style.css">

</head>

<body id="bd">

    <div class="content">
        <i class="fas fa-sun"></i>
        &nbsp;&nbsp;&nbsp;
        <input type="checkbox" id="tooglenight" class="cbx hidden" />
        <label for="tooglenight" class="switch"></label>
        &nbsp;&nbsp;&nbsp;
        <i class="fas fa-moon"></i>
    </div>

    <%- include('./partials/header') %>

        <main>

            <!-- Shop Grid Page Section Start -->
            <div class="product-detail">
                <div class="container">
                    <div class="row">
                        <div class="col-md-12 col-lg-3">
                            <div class="left-sidebar">

                                <!-- product categories Section Start -->
                                <div class="sidebar-box pb30">
                                    <h3 class="heading-tertiary">Product Categories</h3>
                                    <ul class="category-list">

                                    </ul>
                                </div>

                                <!-- Filter By Price -->

                                <h3 class="heading-tertiary mt-5">filter by price</h3>
                                <form id="priceRangeForm">
                                    <div class="price-ranger">
                                        <div class="price-input">
                                            <div class="field">
                                                <span>Min</span>
                                                <input type="number" class="input-min" value="2500">
                                            </div>
                                            <div class="separator">-</div>
                                            <div class="field">
                                                <span>Max</span>
                                                <input type="number" class="input-max" value="7500">
                                            </div>
                                        </div>
                                        <div class="slider">
                                            <div class="progress"></div>
                                        </div>
                                        <div class="range-input">
                                            <input type="range" class="range-min" min="0" max="10000" value="2500"
                                                step="100">
                                            <input type="range" class="range-max" min="0" max="10000" value="7500"
                                                step="100">
                                        </div>
                                        <button type="submit">Filter</button>
                                    </div>
                                </form>



                            </div>
                        </div>
                        <div class="col-md-12 col-lg-9 order-first order-lg-last">
                            <!-- List, Grid View and Sort by Section -->
                            <div class="list-grid-sort">
                                <div class="row">

                                    <div class="col-md-6">
                                        <div class="sizeinproduct">
                                            <ul>
                                                <li class="fontsize_mks">Sort By : </li>
                                                <li>
                                                    <div class="custom_selectmks">
                                                        <select class="form-select" id="sortOptions">
                                                            <option value="relevance">Relevance</option>
                                                            <option value="name_asc">Name (A - Z)</option>
                                                            <option value="name_desc">Name (Z - A)</option>
                                                            <option value="price_asc">Price (Low > High)</option>
                                                            <option value="price_desc">Price (High > Low)</option>
                                                        </select>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="show-result">
                                            <p id="resultsCount">Showing 9 of 15 results</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="right-sidebar">
                                <div class="row" id="productContainer">

                                </div>
                            </div>


                            <!-- Pagination Section -->
                            <div class="pagination-sec">
                                <nav class="pagination pagination_type1">
                                    <ol class="pagination__list" id="paginationList">
                                        <!-- <li class="pagination__group"><a href="#0"
                                            class="pagination__item pagination__control pagination__control_prev">prev</a>
                                    </li>
                                    <li class="pagination__group"><span
                                            class="pagination__item pagination__item_active">1</span></li>
                                    <li class="pagination__group"><a href="#0" class="pagination__item">2</a></li>
                                    <li class="pagination__group"><a href="#0" class="pagination__item">3</a></li>
                                    <li class="pagination__group"><a href="#0"
                                            class="pagination__item pagination__control pagination__control_next">next</a>
                                    </li> -->
                                    </ol>
                                </nav>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            </div>


        </main>

        <%- include('./partials/footer') %>


            <script src="https://cdnjs.cloudflare.com/ajax/libs/tiny-slider/2.9.4/min/tiny-slider.js"></script>

            <script src="/js/bootstrap.bundle.min.js"></script>

            <script src="/js/script.js"></script>

            <script src="https://code.jquery.com/jquery-3.7.1.min.js"
                integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

            <script>
                $(document).ready(function () {
                    $("#tooglenight").change(function () {
                        if (this.checked) {
                            $("#bd").addClass("night");
                            $(".content i").css("color", "#333");
                        } else {
                            $("#bd").removeClass("night");
                            $(".content i").css("color", "white");
                        }
                    });
                });
            </script>


            <script>
                let currentPage1 = 1;
                let totalPages1 = 1;
                let currentCategoryId = null;

                // Function to generate stars based on the rating
                function generateStars(rating) {
                    let starsHTML = '';
                    for (let i = 0; i < 5; i++) {
                        starsHTML += i < rating ? '<i class="fa fa-star"></i>' : '<i class="fa-regular fa-star"></i>';
                    }
                    return starsHTML;
                }
                
                document.addEventListener("DOMContentLoaded", async () => {
                    try {
                        const response = await fetch(`<%= APP_API_BACKEND_URL %>/api/categories`, {
                            method: "GET",
                            headers: {
                                "Content-Type": "application/json",
                            },
                        });

                        if (response.ok) {
                            const categories = await response.json();
                            const categoryList = document.querySelector(".category-list");

                            categoryList.innerHTML = "";

                            categories.categories.forEach((category) => {
                                const li = document.createElement("li");
                                const a = document.createElement("a");
                                a.href = "#";
                                a.dataset.categoryId = category.id;
                                a.textContent = category.name;
                                li.appendChild(a);
                                categoryList.appendChild(li);
                            });

                            categoryList.addEventListener("click", async (event) => {
                                if (event.target.tagName === "A") {
                                    event.preventDefault();

                                    currentCategoryId = event.target.dataset.categoryId;
                                    currentPage1 = 1; // Reset page number to 1
                                    await fetchProductsByCategory(currentCategoryId, currentPage1);
                                }
                            });
                        } else {
                            console.error("Failed to fetch categories");
                        }
                    } catch (error) {
                        console.error("Error:", error);
                    }
                });

                // Function to fetch products by category and page
                async function fetchProductsByCategory(categoryId, page) {
                    try {
                        const response = await fetch(`<%= APP_API_BACKEND_URL %>/api/products/by_category_id/${categoryId}?page=${page}&pageSize=9`, {
                            method: "GET",
                            headers: {
                                "Content-Type": "application/json",
                            },
                        });

                        if (response.ok) {
                            const data = await response.json();
                            displayCategoryProducts(data.products);
                            updatePaginationControls(data.page_meta);
                        } else {
                            console.error("Failed to fetch products");
                        }
                    } catch (error) {
                        console.error("Error fetching products:", error);
                    }
                }

                // Function to display products
                function displayCategoryProducts(products) {
                    const productContainer = document.getElementById("productContainer");
                    productContainer.innerHTML = "";

                    products.forEach((product) => {
                        const productElement = document.createElement("div");
                        productElement.classList.add("col-md-4");

                        const averageRating = product.averageRating || 0;
                        productElement.innerHTML = `
                <div class="abox">
                    <div class="kecimgbox">
                        <a href="http://localhost:4000/products/${product.id}"><img src="${product.images && product.images.length > 0 ? product.images[0] : "/images/products/polo.jpg"}" alt="prod images"></a>
                    </div>
                    <div class="prod-desc">
                        <h4><a href="product.html">${product.name}</a></h4>
                        <div class="rating-mks">${generateStars(averageRating)}</div>
                        <ins>${product.price}</ins>
                    </div>
                </div>
            `;
                        productContainer.appendChild(productElement);
                    });
                }

                // Function to update pagination controls
                function updatePaginationControls(pageMeta) {
                    const paginationList = document.getElementById("paginationList");
                    paginationList.innerHTML = "";

                    totalPages1 = pageMeta.number_of_pages;

                    // Create "Prev" button
                    const prevButton = document.createElement("li");
                    prevButton.classList.add("pagination__group");
                    prevButton.innerHTML = `<a href="#0" class="pagination__item pagination__control pagination__control_prev">prev</a>`;
                    prevButton.onclick = () => {
                        if (currentPage1 > 1) {
                            currentPage1--;
                            fetchProductsByCategory(currentCategoryId, currentPage1);
                        }
                    };
                    paginationList.appendChild(prevButton);

                    // Add page numbers
                    for (let i = 1; i <= totalPages1; i++) {
                        const pageItem = document.createElement("li");
                        pageItem.classList.add("pagination__group");

                        if (i === pageMeta.current_page_number) {
                            pageItem.innerHTML = `<span class="pagination__item pagination__item_active">${i}</span>`;
                        } else {
                            pageItem.innerHTML = `<a href="#0" class="pagination__item">${i}</a>`;
                            pageItem.onclick = () => {
                                currentPage = i;
                                fetchProductsByCategory(currentCategoryId, currentPage1);
                            };
                        }

                        paginationList.appendChild(pageItem);
                    }

                    // Create "Next" button
                    const nextButton = document.createElement("li");
                    nextButton.classList.add("pagination__group");
                    nextButton.innerHTML = `<a href="#0" class="pagination__item pagination__control pagination__control_next">next</a>`;
                    nextButton.onclick = () => {
                        if (currentPage1 < totalPages1) {
                            currentPage1++;
                            fetchProductsByCategory(currentCategoryId, currentPage1);
                        }
                    };
                    paginationList.appendChild(nextButton);
                }

                // Initial fetch for products
                fetchProductsByCategory(currentCategoryId, currentPage1);
            </script>



            <script>
                document.addEventListener("DOMContentLoaded", async () => {
                    const sortSelect = document.getElementById("sortOptions");
                    const resultContainer = document.getElementById("resultsCount");

                    sortSelect.addEventListener("change", async () => {
                        const selectedOption = sortSelect.value;

                        // Define the base API URL
                        const baseUrl = "<%= APP_API_BACKEND_URL %>/api/products/filter?page=1&pageSize=50";

                        // Build the query parameters based on the selected option
                        let queryParams = "";

                        switch (selectedOption) {
                            case "name_asc":
                                queryParams = "&sort=name_asc";
                                break;
                            case "name_desc":
                                queryParams = "&sort=name_desc";
                                break;
                            case "price_asc":
                                queryParams = "&sort=price_asc";
                                break;
                            case "price_desc":
                                queryParams = "&sort=price_desc";
                                break;
                            default:
                                queryParams = ""; // For "Relevance" or any other case
                        }

                        // Fetch data from the API with the selected sorting option
                        try {
                            const response = await fetch(`${baseUrl}${queryParams}`);
                            if (!response.ok) {
                                throw new Error("Failed to fetch products");
                            }

                            const products = await response.json();
                            // Display the products (you need to implement this part)
                            resultContainer.innerHTML = "Showing " + products.page_meta.total_items_count + " of " + products.page_meta.total_items_count + " products";
                            displayProducts(products.products);

                        } catch (error) {
                            console.error("Error:", error);
                            alert("An error occurred while fetching products.");
                        }
                    });
                });
            </script>

            <script>
                document.addEventListener("DOMContentLoaded", async () => {
                    const minInput = document.querySelector(".input-min");  // Min price input field
                    const maxInput = document.querySelector(".input-max");  // Max price input field
                    const rangeMinInput = document.querySelector(".range-min"); // Min price slider
                    const rangeMaxInput = document.querySelector(".range-max"); // Max price slider
                    const priceRangeForm = document.getElementById("priceRangeForm"); // The form element

                    // Function to update the price range input fields based on slider changes
                    function updateRangeInputs() {
                        const minPrice = rangeMinInput.value;  // Get the value of min price from slider
                        const maxPrice = rangeMaxInput.value;  // Get the value of max price from slider

                        minInput.value = minPrice;  // Set the min price input field to the slider value
                        maxInput.value = maxPrice;  // Set the max price input field to the slider value
                    }

                    // Function to fetch products within the selected price range
                    async function fetchProducts(minPrice, maxPrice) {
                        console.log(maxPrice);
                        try {
                            const response = await fetch(`<%= APP_API_BACKEND_URL %>/api/products/filter?minPrice=${minPrice}&maxPrice=${maxPrice}`);
                            const products = await response.json();
                            console.log(products)
                            // Display the products
                            displayProducts(products.products);  // Call the display function to update the UI

                        } catch (error) {
                            console.error("Error fetching products:", error);  // Handle any errors
                        }
                    }

                    // Event listeners for range inputs to update the input fields when sliders change
                    rangeMinInput.addEventListener("input", updateRangeInputs);  // Trigger when min slider changes
                    rangeMaxInput.addEventListener("input", updateRangeInputs);  // Trigger when max slider changes

                    // Handle form submission
                    priceRangeForm.addEventListener("submit", (event) => {
                        event.preventDefault();  // Prevent the default form submission behavior

                        const minPrice = minInput.value;  // Get the min price from the input field
                        const maxPrice = maxInput.value;  // Get the max price from the input field

                        console.log(minPrice);
                        console.log(maxPrice);

                        // Fetch and display products based on the selected price range
                        fetchProducts(minPrice, maxPrice);
                    });

                    // Initialize with default values (This will set the inputs to the slider's default values)
                    updateRangeInputs();
                });

                // Function to display products (you can customize this based on your needs)
                function displayProducts(products) {
                    const productContainer = document.getElementById("productContainer");

                    console.log(products)

                    productContainer.innerHTML = "";  // Clear the previous products

                    products.forEach(product => {
                        const productElement = document.createElement("div");
                        productElement.classList.add("col-md-4"); // Adjust the column width
                        const averageRating = product.averageRating || 0;
                        productElement.innerHTML = `
            <div class="abox">
                <div class="kecimgbox"> <a href="<%= APP_API_URL %>/products/${product.id}"><img
                            src=${product.images && product.images.length > 0 ? product.images[0] : "/images/products/polo.jpg"} class="img-fluid"
                            alt="prod images"></a>
                </div>
                <div class="prod-desc">
                    <h4><a href="product.html">${product.name}</a></h4>
                    <div class="rating-mks">${generateStars(averageRating)} </div>
                    <ins>${product.price}</ins>
                </div>
            </div>
        `;
                        productContainer.appendChild(productElement);  // Append each product to the container
                    });
                }


            </script>

            <script>
                let currentPage = 1;
                let totalPages = 1;

                // Function to generate the stars based on the rating
                function generateStars(rating) {
                    let starsHTML = '';
                    for (let i = 0; i < 5; i++) {
                        starsHTML += i < rating ? '<i class="fa fa-star"></i>' : '<i class="fa-regular fa-star"></i>';
                    }
                    return starsHTML;
                }

                // Function to fetch products based on the current page
                async function fetchProducts(page) {
                    const resultContainer = document.getElementById("resultsCount");
                    try {
                        const response = await fetch(`<%= APP_API_BACKEND_URL %>/api/products?page=${page}&pageSize=9`, {
                            method: "GET",
                            headers: {
                                "Content-Type": "application/json",
                            },
                        });

                        if (response.ok) {
                            const data = await response.json();
                            const productContainer = document.getElementById("productContainer");
                            const products = data.products;
                            const pageMeta = data.page_meta;
                            resultContainer.innerHTML = "Showing 9 of " + data.page_meta.total_items_count + " products";

                            // Update total pages
                            totalPages = pageMeta.number_of_pages;

                            // Clear the product container
                            productContainer.innerHTML = "";

                            // Render each product
                            products.forEach((product) => {
                                const productElement = document.createElement("div");
                                productElement.classList.add("col-md-4");

                                const averageRating = product.averageRating || 0;
                                productElement.innerHTML = `
                        <div class="abox">
                            <div class="kecimgbox">
                                <a href="<%= APP_API_URL %>/products/${product.id}">
                                    <img src="${product.images && product.images.length > 0 ? product.images[0] : "/images/products/polo.jpg"}" class="img-fluid" alt="prod images">
                                </a>
                            </div>
                            <div class="prod-desc">
                                <h4><a href="product.html">${product.name}</a></h4>
                                <div class="rating-mks">
                                    ${generateStars(averageRating)}
                                </div>
                                <ins>${product.price}</ins>
                            </div>
                        </div>
                    `;
                                productContainer.appendChild(productElement);
                            });

                            // Update the pagination controls
                            updatePaginationControls(pageMeta);
                        } else {
                            console.error("Failed to fetch products");
                        }
                    } catch (error) {
                        console.error("Error:", error);
                    }
                }

                // Function to update the pagination dynamically
                function updatePaginationControls(pageMeta) {
                    const paginationList = document.getElementById("paginationList");
                    paginationList.innerHTML = "";

                    // Create "Prev" button
                    const prevButton = document.createElement("li");
                    prevButton.classList.add("pagination__group");
                    prevButton.innerHTML = `<a href="#0" class="pagination__item pagination__control pagination__control_prev">prev</a>`;
                    prevButton.onclick = () => {
                        if (currentPage > 1) {
                            currentPage--;
                            fetchProducts(currentPage);
                        }
                    };
                    paginationList.appendChild(prevButton);

                    // Add page numbers
                    for (let i = 1; i <= pageMeta.number_of_pages; i++) {
                        const pageItem = document.createElement("li");
                        pageItem.classList.add("pagination__group");

                        if (i === pageMeta.current_page_number) {
                            pageItem.innerHTML = `<span class="pagination__item pagination__item_active">${i}</span>`;
                        } else {
                            pageItem.innerHTML = `<a href="#0" class="pagination__item">${i}</a>`;
                            pageItem.onclick = () => {
                                currentPage = i;
                                fetchProducts(currentPage);
                            };
                        }

                        paginationList.appendChild(pageItem);
                    }

                    // Create "Next" button
                    const nextButton = document.createElement("li");
                    nextButton.classList.add("pagination__group");
                    nextButton.innerHTML = `<a href="#0" class="pagination__item pagination__control pagination__control_next">next</a>`;
                    nextButton.onclick = () => {
                        if (currentPage < pageMeta.number_of_pages) {
                            currentPage++;
                            fetchProducts(currentPage);
                        }
                    };
                    paginationList.appendChild(nextButton);
                }

                // Initial fetch for the first page
                fetchProducts(currentPage);

            </script>

</body>

</html>